import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { Strategy, ExtractJwt } from 'passport-jwt';
import { AuthService } from '../auth.service';
import { UserRole } from 'src/users/enum/user.role';

// üìã –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è JWT payload (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ AuthService)
interface JwtPayload {
  sub: number; // user.id
  telegram_id: string;
  role: string;
  name: string;
  iat?: number; // issued at
  exp?: number; // expires at
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private readonly authService: AuthService) {
    super({
      // üîç –û—Ç–∫—É–¥–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ç–æ–∫–µ–Ω - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization: Bearer <token>
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),

      // ‚è∞ –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
      ignoreExpiration: false,

      // üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ—Ç –∂–µ —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞)
      secretOrKey: process.env.JWT_SECRET,
    });
  }

  /**
   * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
   *
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ passport-jwt
   * –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –∏ —É–±–µ–¥–∏–ª—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –∏—Å—Ç–µ–∫.
   *
   * @param payload - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
   * @returns User –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ req.user
   */
  async validate(payload: JwtPayload) {
    try {
      // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const user = await this.authService.validateUser({
        ...payload,
        role: payload.role as UserRole, // <-- –±–µ–∑–æ–ø–∞—Å–Ω–æ, –µ—Å–ª–∏ —Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
      });

      // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ req.user –≤–æ –≤—Å–µ—Ö –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–∞—Ö
      return user;
    } catch (error) {
      // ‚ùå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }
}
