import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as TelegramBot from 'node-telegram-bot-api';
import { Case } from 'src/cases/entities/case.entity';

@Injectable()
export class TelegramService {
  private bot: TelegramBot;

  constructor(private readonly configService: ConfigService) {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN not set');
    }

    this.bot = new TelegramBot(token, { polling: false });
  }

  async sendMessage(telegramId: string, text: string): Promise<void> {
    try {
      console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram ID ${telegramId}:\n${text}`);
      await this.bot.sendMessage(telegramId, text, {
        parse_mode: 'HTML',
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  }

  async sendCheckReminder(caseData: Case) {
    const text = `üïµÔ∏è‚Äç‚ôÇÔ∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ª–∞</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–°—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> ${this.formatDate(caseData.check_deadline)}\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  async sendReturnNotification(caseData: Case) {
    const text = `‚ùó <b>–î–µ–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ!</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> ${this.formatDate(caseData.filing_date)}\n` +
      `‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞.`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  async sendAppealReminder(caseData: Case) {
    const text = `üìù <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–∞—Å—Ç–Ω–æ–π –∂–∞–ª–æ–±–µ</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã:</b> ${this.formatDate(caseData.appeal_deadline)}\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  private formatDate(date: Date): string {
    return date ? new Date(date).toLocaleDateString('ru-RU') : '‚Äî';
  }

  async sendHearingReminder(
    caseData: Case,
    type: 'day_before' | 'hour_before',
  ) {
    const prefix =
      type === 'day_before'
        ? 'üìå –ó–∞–≤—Ç—Ä–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–µ!'
        : '‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å –∑–∞—Å–µ–¥–∞–Ω–∏–µ!';
    const timeText = type === 'day_before' ? '–∑–∞–≤—Ç—Ä–∞' : '—á–µ—Ä–µ–∑ —á–∞—Å';
    
    const text = `${prefix}\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üïí <b>–î–∞—Ç–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è:</b> ${this.formatDateTime(caseData.hearing_date)}\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}\n\n` +
      `‚ö†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞—Å–µ–¥–∞–Ω–∏—é ${timeText}!`;
      
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  // –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  private formatDateTime(date: Date): string {
    if (!date) return '‚Äî';
    
    const d = new Date(date);
    const dateStr = d.toLocaleDateString('ru-RU');
    const timeStr = d.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    return `${dateStr} –≤ ${timeStr}`;
  }
}
