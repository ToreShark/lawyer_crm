import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectRepository } from '@nestjs/typeorm';
import * as TelegramBot from 'node-telegram-bot-api';
import { Case } from 'src/cases/entities/case.entity';
import { User } from 'src/users/entities/user.entity';
import { Repository } from 'typeorm';
import { TimezoneUtils } from '../utils/timezone.utils';

@Injectable()
export class TelegramService {
  private bot: TelegramBot;

  constructor(
    private readonly configService: ConfigService,
    @InjectRepository(User) // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
    private readonly userRepo: Repository<User>,
  ) {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN not set');
    }

    this.bot = new TelegramBot(token, { polling: false });
  }

  async sendMessage(telegramId: string, text: string): Promise<void> {
    try {
      console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram ID ${telegramId}:\n${text}`);
      await this.bot.sendMessage(telegramId, text, {
        parse_mode: 'HTML',
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  }

  async sendCheckReminder(caseData: Case) {
    const text =
      `‚öñÔ∏è <b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Å—É–¥ ‚Üí –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–∏ –¥–µ–ª–∞</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–°—Ä–æ–∫ –≤—ã–Ω–µ—Å–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</b> ${this.formatDate(caseData.check_deadline)}\n` +
      `‚è∞ <b>–ù–µ –ø–æ–∑–¥–Ω–µ–µ 10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å–æ –¥–Ω—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  async sendReturnNotification(caseData: Case) {
    const text =
      `‚ùó <b>–î–µ–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ!</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> ${this.formatDate(caseData.filing_date)}\n` +
      `‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞.`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  async sendAppealReminder(caseData: Case) {
    const text =
      `üìù <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–∞—Å—Ç–Ω–æ–π –∂–∞–ª–æ–±–µ</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã:</b> ${this.formatDate(caseData.appeal_deadline)}\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  async sendCaseEndReminder(caseData: Case, daysLeft: number) {
    const text =
      `‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–ª–∞</b>\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è:</b> ${this.formatDate(caseData.accepted_date)}\n` +
      `üîö <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> ${this.formatDate(caseData.case_end_date)}\n` +
      `‚ö†Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> ${daysLeft}\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}\n\n` +
      `üìã <b>23 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–µ–ª–∞</b>`;
    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  private formatDate(date: Date): string {
    return TimezoneUtils.formatDateForAlmaty(date);
  }

  async sendHearingReminder(
    caseData: Case,
    type: 'day_before' | 'hour_before',
  ) {
    const prefix =
      type === 'day_before'
        ? 'üìå –ó–∞–≤—Ç—Ä–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–µ!'
        : '‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å –∑–∞—Å–µ–¥–∞–Ω–∏–µ!';
    const timeText = type === 'day_before' ? '–∑–∞–≤—Ç—Ä–∞' : '—á–µ—Ä–µ–∑ —á–∞—Å';

    const text =
      `${prefix}\n\n` +
      `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
      `üïí <b>–î–∞—Ç–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è:</b> ${this.formatDateTime(caseData.hearing_date)}\n` +
      `üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${caseData.responsible.name}\n\n` +
      `‚ö†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∑–∞—Å–µ–¥–∞–Ω–∏—é ${timeText}!`;

    await this.sendMessage(caseData.responsible.telegram_id, text);
  }

  // –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  private formatDateTime(date: Date): string {
    return TimezoneUtils.formatDateTimeForAlmaty(date);
  }

  // üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  async sendStatusChangeToTeam(
    caseData: Case,
    oldStatus: string,
    newStatus: string,
    changedBy: string,
  ) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã
      const activeUsers = await this.userRepo.find({
        where: { is_active: true },
      });

      const statusText = this.getStatusText(newStatus);
      const oldStatusText = this.getStatusText(oldStatus);

      const message =
        `üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–µ–ª–∞</b>\n\n` +
        `üìÑ <b>–î–µ–ª–æ:</b> ${caseData.number} ‚Äî ${caseData.title}\n` +
        `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${oldStatusText} ‚Üí ${statusText}\n` +
        `üë§ <b>–ò–∑–º–µ–Ω–∏–ª:</b> ${changedBy}\n` +
        `‚è∞ <b>–í—Ä–µ–º—è:</b> ${TimezoneUtils.getCurrentDateTimeForAlmaty()}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      for (const user of activeUsers) {
        await this.sendMessage(user.telegram_id, message);
      }

      console.log(
        `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${activeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–µ:', error.message);
    }
  }

  // üé® –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  private getStatusText(status: string): string {
    const statusMap = {
      submitted: '–ü–æ–¥–∞–Ω',
      pending_check: '–ü—Ä–æ–≤–µ—Ä–∫–∞',
      accepted: '–ü—Ä–∏–Ω—è—Ç',
      returned: '–í–æ–∑–≤—Ä–∞—â–µ–Ω',
      closed: '–ó–∞–∫—Ä—ã—Ç',
      decision_made: '–ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ',
      appeal: '–ê–ø–µ–ª–ª—è—Ü–∏—è',
    };
    return statusMap[status] || status;
  }
}
