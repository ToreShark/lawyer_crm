import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThanOrEqual, Between } from 'typeorm';
import { Case, CaseStatus } from '../cases/entities/case.entity';
import { TelegramService } from '../telegram/telegram.service';

@Injectable()
export class SchedulerService {
  private readonly logger = new Logger(SchedulerService.name);

  constructor(
    @InjectRepository(Case)
    private readonly caseRepo: Repository<Case>,
    private readonly telegramService: TelegramService,
  ) {}

  // üïí –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 (—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤
  @Cron('0 9 * * 1-5', {
    timeZone: 'Asia/Almaty', // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ê—Å—Ç–∞–Ω—ã
  })
  async checkDeadlines() {
    this.logger.log(
      '‚è∞ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–æ–≤ –≤—ã–Ω–µ—Å–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–∏ –¥–µ–ª–∞ (10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)',
    );

    const today = new Date();
    const cases = await this.caseRepo.find({
      where: {
        check_deadline: LessThanOrEqual(today),
        status: CaseStatus.SUBMITTED,
      },
      relations: ['responsible'],
    });

    this.logger.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –≤—ã–Ω–µ—Å–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${cases.length}`,
    );

    let sentCount = 0;
    for (const caseItem of cases) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (!this.wasNotificationSent(caseItem, 'check_reminder')) {
        try {
          await this.telegramService.sendCheckReminder(caseItem);
          await this.markNotificationSent(caseItem, 'check_reminder');
          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–Ω–µ—Å–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–ª–∞: ${caseItem.number}`,
          );
        } catch (error) {
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–µ–ª–∞ ${caseItem.number}:`,
            error.message,
          );
        }
      }
    }

    this.logger.log(
      `üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤—ã–Ω–µ—Å–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${sentCount}`,
    );
  }

  // üìÜ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00 ‚Äî –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è
  @Cron('0 18 * * *', {
    timeZone: 'Asia/Almaty',
  })
  async checkHearingReminders() {
    this.logger.log('üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (18:00)');

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    // –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const tomorrowStart = new Date(tomorrow);
    tomorrowStart.setHours(0, 0, 0, 0);
    const tomorrowEnd = new Date(tomorrow);
    tomorrowEnd.setHours(23, 59, 59, 999);

    const cases = await this.caseRepo.find({
      where: {
        hearing_date: Between(tomorrowStart, tomorrowEnd),
        status: CaseStatus.ACCEPTED,
      },
      relations: ['responsible'],
    });

    this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${cases.length}`);

    let sentCount = 0;
    for (const caseItem of cases) {
      if (!this.wasNotificationSent(caseItem, 'day_before')) {
        try {
          await this.telegramService.sendHearingReminder(
            caseItem,
            'day_before',
          );
          await this.markNotificationSent(caseItem, 'day_before');
          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏ –¥–ª—è –¥–µ–ª–∞: ${caseItem.number}`,
          );
        } catch (error) {
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏ –¥–ª—è –¥–µ–ª–∞ ${caseItem.number}:`,
            error.message,
          );
        }
      }
    }

    this.logger.log(
      `üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞—Å–µ–¥–∞–Ω–∏—è—Ö: ${sentCount}`,
    );
  }

  // ‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è
  @Cron('0 * * * *', {
    timeZone: 'Asia/Almaty',
  })
  async checkHourlyReminders() {
    this.logger.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Å–µ–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ —á–∞—Å');

    const now = new Date();
    const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000);

    // –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç 1 —á–∞—Å–∞ –¥–æ 1 —á–∞—Å–∞ 5 –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    const rangeStart = oneHourLater;
    const rangeEnd = new Date(oneHourLater.getTime() + 5 * 60 * 1000);

    const cases = await this.caseRepo.find({
      where: {
        hearing_date: Between(rangeStart, rangeEnd),
        status: CaseStatus.ACCEPTED,
      },
      relations: ['responsible'],
    });

    this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—Å–µ–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ —á–∞—Å: ${cases.length}`);

    let sentCount = 0;
    for (const caseItem of cases) {
      if (!this.wasNotificationSent(caseItem, 'hour_before')) {
        try {
          await this.telegramService.sendHearingReminder(
            caseItem,
            'hour_before',
          );
          await this.markNotificationSent(caseItem, 'hour_before');
          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–ª—è –¥–µ–ª–∞: ${caseItem.number}`,
          );
        } catch (error) {
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å –¥–ª—è –¥–µ–ª–∞ ${caseItem.number}:`,
            error.message,
          );
        }
      }
    }

    this.logger.log(`üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —á–∞—Å: ${sentCount}`);
  }

  // üìù –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ –ø–æ–¥–∞—á–∏ —á–∞—Å—Ç–Ω—ã—Ö –∂–∞–ª–æ–±
  @Cron('0 10 * * *', {
    timeZone: 'Asia/Almaty',
  })
  async checkAppealDeadlines() {
    this.logger.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ –ø–æ–¥–∞—á–∏ —á–∞—Å—Ç–Ω—ã—Ö –∂–∞–ª–æ–±');

    const today = new Date();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    // –ò—â–µ–º –¥–µ–ª–∞ –≥–¥–µ —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞
    const cases = await this.caseRepo.find({
      where: {
        appeal_deadline: Between(today, tomorrow),
        status: CaseStatus.CLOSED, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∂–∞–ª–æ–±—ã –ø–æ–¥–∞—é—Ç—Å—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –¥–µ–ª–∞
      },
      relations: ['responsible'],
    });

    this.logger.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –∂–∞–ª–æ–±—ã: ${cases.length}`,
    );

    let sentCount = 0;
    for (const caseItem of cases) {
      if (!this.wasNotificationSent(caseItem, 'appeal_reminder')) {
        try {
          await this.telegramService.sendAppealReminder(caseItem);
          await this.markNotificationSent(caseItem, 'appeal_reminder');
          sentCount++;
          this.logger.log(
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∂–∞–ª–æ–±–µ –¥–ª—è –¥–µ–ª–∞: ${caseItem.number}`,
          );
        } catch (error) {
          this.logger.error(
            `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∂–∞–ª–æ–±–µ –¥–ª—è –¥–µ–ª–∞ ${caseItem.number}:`,
            error.message,
          );
        }
      }
    }

    this.logger.log(`üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∂–∞–ª–æ–±–∞—Ö: ${sentCount}`);
  }

  // üîö –ö–∞–∂–¥—ã–µ 10 –¥–Ω–µ–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–ª
  @Cron('0 11 */10 * *', {
    timeZone: 'Asia/Almaty',
  })
  async checkCaseEndReminders() {
    this.logger.log('üîö –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏–π –¥–µ–ª (–∫–∞–∂–¥—ã–µ 10 –¥–Ω–µ–π)');

    const today = new Date();
    const in10Days = new Date();
    in10Days.setDate(today.getDate() + 10);
    
    const in20Days = new Date();
    in20Days.setDate(today.getDate() + 20);

    // –ò—â–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10-20 –¥–Ω–µ–π
    const cases = await this.caseRepo.find({
      where: {
        status: CaseStatus.ACCEPTED,
        case_end_date: Between(today, in20Days),
      },
      relations: ['responsible'],
    });

    this.logger.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º: ${cases.length}`,
    );

    let sentCount = 0;
    for (const caseItem of cases) {
      if (caseItem.case_end_date) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const diffTime = caseItem.case_end_date.getTime() - today.getTime();
        const daysLeft = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 10, 5 –∏–ª–∏ 1 –¥–µ–Ω—å
        const shouldNotify = daysLeft === 10 || daysLeft === 5 || daysLeft === 1 || daysLeft === 0;
        
        if (shouldNotify) {
          const notificationKey = `case_end_${daysLeft}_days`;
          
          if (!this.wasNotificationSent(caseItem, notificationKey)) {
            try {
              await this.telegramService.sendCaseEndReminder(caseItem, daysLeft);
              await this.markNotificationSent(caseItem, notificationKey);
              sentCount++;
              this.logger.log(
                `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–ª—è –¥–µ–ª–∞: ${caseItem.number} (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π)`,
              );
            } catch (error) {
              this.logger.error(
                `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–ª—è –¥–µ–ª–∞ ${caseItem.number}:`,
                error.message,
              );
            }
          }
        }
      }
    }

    this.logger.log(`üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–µ–ª: ${sentCount}`);
  }

  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  private wasNotificationSent(
    caseItem: Case,
    notificationType: string,
  ): boolean {
    if (!caseItem.notifications_sent) return false;

    const notifications = caseItem.notifications_sent;
    return notifications[notificationType] === true;
  }

  // ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
  private async markNotificationSent(
    caseItem: Case,
    notificationType: string,
  ): Promise<void> {
    const notifications = caseItem.notifications_sent || {};
    notifications[notificationType] = true;
    notifications[`${notificationType}_sent_at`] = new Date().toISOString();

    await this.caseRepo.update(caseItem.id, {
      notifications_sent: notifications,
    });
  }

  // üß™ –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä)
  async testAllReminders(): Promise<string> {
    this.logger.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');

    try {
      await this.checkDeadlines();
      await this.checkHearingReminders();
      await this.checkHourlyReminders();
      await this.checkAppealDeadlines();
      await this.checkCaseEndReminders();

      return '‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ';
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
      return `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    }
  }
}
