import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { DataSource } from 'typeorm';
import { UserRole } from './users/enum/user.role';
import { User } from './users/entities/user.entity';
import { Case, CaseStatus } from './cases/entities/case.entity';

async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const dataSource = app.get(DataSource);

  const userRepo = dataSource.getRepository(User);
  const caseRepo = dataSource.getRepository(Case);

  // üîπ –°–æ–∑–¥–∞—ë–º —Ç–µ–±—è –∫–∞–∫ lawyer (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  let lawyer = await userRepo.findOneBy({ telegram_id: '376068212' });
  if (!lawyer) {
    lawyer = userRepo.create({
      telegram_id: '376068212',
      name: 'Tor Mot', // –∏–ª–∏ —Å–≤–æ—ë –∏–º—è
      username: 'tor_mot',
      role: UserRole.LAWYER,
    });
    await userRepo.save(lawyer);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—é—Ä–∏—Å—Ç —Å–æ–∑–¥–∞–Ω');
  }

  // üîπ –°–æ–∑–¥–∞—ë–º –ø–æ–º–æ—â–Ω–∏—Ü—É –ê–∑–∏–∑—É –∫–∞–∫ assistant (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  const assistantTelegramId = '827743984';
  let assistant = await userRepo.findOneBy({
    telegram_id: assistantTelegramId,
  });
  if (!assistant) {
    assistant = userRepo.create({
      telegram_id: assistantTelegramId,
      name: 'Aziza',
      username: 'aziza_assistant',
      role: UserRole.ASSISTANT,
    });
    await userRepo.save(assistant);
    console.log('‚úÖ –ü–æ–º–æ—â–Ω–∏—Ü–∞ Aziza —Å–æ–∑–¥–∞–Ω–∞');
  }

  // üî∏ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ª–∞ —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º lawyer
  const now = new Date();

  const overdueCase = caseRepo.create({
    number: 'TEST-001',
    title: '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–ª–æ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º',
    description: '–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
    status: CaseStatus.SUBMITTED,
    filing_date: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),
    check_deadline: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
    responsible: lawyer,
    notifications_sent: {},
  });

  const tomorrowHearing = new Date(now);
  tomorrowHearing.setDate(tomorrowHearing.getDate() + 1);
  tomorrowHearing.setHours(14, 30, 0, 0);

  const hearingCase = caseRepo.create({
    number: 'TEST-002',
    title: '–î–µ–ª–æ —Å –∑–∞—Å–µ–¥–∞–Ω–∏–µ–º –∑–∞–≤—Ç—Ä–∞',
    description: '–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞—Å–µ–¥–∞–Ω–∏–∏',
    status: CaseStatus.ACCEPTED,
    filing_date: new Date(now.getTime() - 10 * 24 * 60 * 60 * 1000),
    hearing_date: tomorrowHearing,
    responsible: lawyer,
    notifications_sent: {},
  });

  const hourLaterHearing = new Date(now.getTime() + 60 * 60 * 1000);

  const hourlyCase = caseRepo.create({
    number: 'TEST-003',
    title: '–î–µ–ª–æ —Å –∑–∞—Å–µ–¥–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ —á–∞—Å',
    description: '–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
    status: CaseStatus.ACCEPTED,
    filing_date: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000),
    hearing_date: hourLaterHearing,
    responsible: lawyer,
    notifications_sent: {},
  });

  await caseRepo.save([overdueCase, hearingCase, hourlyCase]);

  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ª–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ–∑–¥–∞–Ω—ã:');
  console.log('üìã TEST-001: –ò—Å—Ç–µ–∫—à–∏–π —Å—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏');
  console.log('üìã TEST-002: –ó–∞—Å–µ–¥–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 14:30');
  console.log('üìã TEST-003: –ó–∞—Å–µ–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å');

  await app.close();
}

bootstrap();
